一、单例模式的好处
    1.对于频繁使用的对象，可以省略new操作花费的时间，这对于那些重量级对象而言，是非常可观的一笔系统开销；
    2.由于new操作的次数减少，因而对系统内存的使用频率也会降低，这将减轻GC压力，缩短GC停顿时间。
 
 
二、创建方式
    1）饿汉式
1 public class Singleton {
2     private Singleton(){
3         System.out.println("Singleton is create”);
4     }
5     private static Singleton instance = new Singleton();
6     public static Singleton getInstance() {
7         return instance;
8     }
9 }
 
使用以上方式创建单例有几点必须特别注意：
    因为我们要保证系统中不会有人意外创建多余的实例，因此
    1.我们把Singleton的构造函数设置为private。这点非常重要，这就警告所有的开发人员，不能随便创建这个类的实例，从而有效避免该类被错误的创建。
    2.instance对象必须是private并且static的。如果不是private，那么instance的安全性无法得到保证。一个小小的意外就可能使得in-stance变成null。
    3.因为工厂方法getInstance()必须是static的，因此对应的instance也必须是static。
 
优点：这个单例的性能是非常好的，因为getInstance()方法只是简单地返回instance，并没有任何锁操作，因此它在并行程序中，会有    良好的表现。
 
缺点：Singleton实例在什么时候创建是不受控制的。对于静态成员instance，它会在类第一次初始化的时候被创建。这个时刻并不一定是getInstance()方法第一次被调用的时候。任何对Singleton方法或者字段的引用，都会导致类初始化，并创建instance实例，但是类初始化只有一次，因此instance实例永远只会被创建一次
 
    2）懒汉式
01 public class LazySingleton {
02     private LazySingleton() {
03         System.out.println("LazySingleton is create”);
04     }
05     private static LazySingleton instance = null;
06     public static synchronized LazySingleton getInstance() {
07         if (instance == null)
08             instance = new LazySingleton();
09         return instance;
10     }
11 }
 
注意点:
    1.为了防止对象被多次创建，我们不得不使用synchronized进行方法同步。
 
优点：精确控制instance的创建时间，它只会在in-stance被第一次使用时，创建对象,这种实现的好处是，充分利用了延迟加载，只在真正需要时创建对象
 
缺点：并发环境下加锁，竞争激烈的场合对性能可能产生一定的影响。
 
    3)使用内部类
01 public class StaticSingleton {
02     private StaticSingleton(){
03         System.out.println("StaticSingleton is create”);
04     }
05     private static class SingletonHolder {
06         private static StaticSingleton instance = new StaticSingleton();
07     }
08     public static StaticSingleton getInstance() {
09         return SingletonHolder.instance;
10     }
11 }
 
优点：
    同时拥有前两种方式的优点
   1.首先getInstance()方法中没有锁，这使得在高并发环境下性能优越
   2.只有在getInstance()方法被第一次调用时，StaticSingleton的实例才会被创建（这种方法巧妙地使用了内部类和类的初始化方式）
   3.内部类SingletonHolder被申明为private，这使得我们不可能在外部访问并初始化它。而我们只可能在getInstance()内部对SingletonHolder类进行初始化，利用虚拟机的类初始化机制创建单例。
